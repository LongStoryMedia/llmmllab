# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import inference_pb2 as inference__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in inference_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class InferenceServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ChatStream = channel.unary_stream(
                '/inference.InferenceService/ChatStream',
                request_serializer=inference__pb2.ChatRequest.SerializeToString,
                response_deserializer=inference__pb2.ChatResponse.FromString,
                _registered_method=True)
        self.GenerateStream = channel.unary_stream(
                '/inference.InferenceService/GenerateStream',
                request_serializer=inference__pb2.GenerateRequest.SerializeToString,
                response_deserializer=inference__pb2.GenerateResponse.FromString,
                _registered_method=True)
        self.GetEmbedding = channel.unary_unary(
                '/inference.InferenceService/GetEmbedding',
                request_serializer=inference__pb2.EmbeddingRequest.SerializeToString,
                response_deserializer=inference__pb2.EmbeddingResponse.FromString,
                _registered_method=True)
        self.GenerateImage = channel.unary_unary(
                '/inference.InferenceService/GenerateImage',
                request_serializer=inference__pb2.ImageGenerateRequest.SerializeToString,
                response_deserializer=inference__pb2.ImageGenerateResponse.FromString,
                _registered_method=True)
        self.EditImage = channel.unary_unary(
                '/inference.InferenceService/EditImage',
                request_serializer=inference__pb2.ImageEditRequest.SerializeToString,
                response_deserializer=inference__pb2.ImageEditResponse.FromString,
                _registered_method=True)
        self.CheckImageStatus = channel.unary_unary(
                '/inference.InferenceService/CheckImageStatus',
                request_serializer=inference__pb2.ImageStatusRequest.SerializeToString,
                response_deserializer=inference__pb2.ImageStatusResponse.FromString,
                _registered_method=True)
        self.ManageVRAM = channel.stream_stream(
                '/inference.InferenceService/ManageVRAM',
                request_serializer=inference__pb2.VRAMRequest.SerializeToString,
                response_deserializer=inference__pb2.VRAMResponse.FromString,
                _registered_method=True)
        self.ClearMemory = channel.unary_unary(
                '/inference.InferenceService/ClearMemory',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=inference__pb2.MemoryResponse.FromString,
                _registered_method=True)
        self.GetMemoryStats = channel.unary_unary(
                '/inference.InferenceService/GetMemoryStats',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=inference__pb2.MemoryStatsResponse.FromString,
                _registered_method=True)


class InferenceServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ChatStream(self, request, context):
        """Chat service with streaming response
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateStream(self, request, context):
        """Generate text (non-chat) with streaming response
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEmbedding(self, request, context):
        """Get embeddings from text
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateImage(self, request, context):
        """Image generation with non-streaming response (returns image ID for status check)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EditImage(self, request, context):
        """Edit existing image
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckImageStatus(self, request, context):
        """Check status of image generation/edit request
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ManageVRAM(self, request_iterator, context):
        """VRAM memory management bidirectional streaming
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClearMemory(self, request, context):
        """Clear VRAM/cache
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMemoryStats(self, request, context):
        """Get current memory allocation stats
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_InferenceServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ChatStream': grpc.unary_stream_rpc_method_handler(
                    servicer.ChatStream,
                    request_deserializer=inference__pb2.ChatRequest.FromString,
                    response_serializer=inference__pb2.ChatResponse.SerializeToString,
            ),
            'GenerateStream': grpc.unary_stream_rpc_method_handler(
                    servicer.GenerateStream,
                    request_deserializer=inference__pb2.GenerateRequest.FromString,
                    response_serializer=inference__pb2.GenerateResponse.SerializeToString,
            ),
            'GetEmbedding': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEmbedding,
                    request_deserializer=inference__pb2.EmbeddingRequest.FromString,
                    response_serializer=inference__pb2.EmbeddingResponse.SerializeToString,
            ),
            'GenerateImage': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateImage,
                    request_deserializer=inference__pb2.ImageGenerateRequest.FromString,
                    response_serializer=inference__pb2.ImageGenerateResponse.SerializeToString,
            ),
            'EditImage': grpc.unary_unary_rpc_method_handler(
                    servicer.EditImage,
                    request_deserializer=inference__pb2.ImageEditRequest.FromString,
                    response_serializer=inference__pb2.ImageEditResponse.SerializeToString,
            ),
            'CheckImageStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckImageStatus,
                    request_deserializer=inference__pb2.ImageStatusRequest.FromString,
                    response_serializer=inference__pb2.ImageStatusResponse.SerializeToString,
            ),
            'ManageVRAM': grpc.stream_stream_rpc_method_handler(
                    servicer.ManageVRAM,
                    request_deserializer=inference__pb2.VRAMRequest.FromString,
                    response_serializer=inference__pb2.VRAMResponse.SerializeToString,
            ),
            'ClearMemory': grpc.unary_unary_rpc_method_handler(
                    servicer.ClearMemory,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=inference__pb2.MemoryResponse.SerializeToString,
            ),
            'GetMemoryStats': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMemoryStats,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=inference__pb2.MemoryStatsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'inference.InferenceService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('inference.InferenceService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class InferenceService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ChatStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/inference.InferenceService/ChatStream',
            inference__pb2.ChatRequest.SerializeToString,
            inference__pb2.ChatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GenerateStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/inference.InferenceService/GenerateStream',
            inference__pb2.GenerateRequest.SerializeToString,
            inference__pb2.GenerateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetEmbedding(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/inference.InferenceService/GetEmbedding',
            inference__pb2.EmbeddingRequest.SerializeToString,
            inference__pb2.EmbeddingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GenerateImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/inference.InferenceService/GenerateImage',
            inference__pb2.ImageGenerateRequest.SerializeToString,
            inference__pb2.ImageGenerateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EditImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/inference.InferenceService/EditImage',
            inference__pb2.ImageEditRequest.SerializeToString,
            inference__pb2.ImageEditResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CheckImageStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/inference.InferenceService/CheckImageStatus',
            inference__pb2.ImageStatusRequest.SerializeToString,
            inference__pb2.ImageStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ManageVRAM(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/inference.InferenceService/ManageVRAM',
            inference__pb2.VRAMRequest.SerializeToString,
            inference__pb2.VRAMResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ClearMemory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/inference.InferenceService/ClearMemory',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            inference__pb2.MemoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMemoryStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/inference.InferenceService/GetMemoryStats',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            inference__pb2.MemoryStatsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
