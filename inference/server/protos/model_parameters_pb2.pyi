"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
GENERATED CODE - DO NOT EDIT
Generated by schema2code proto generator
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class ModelParameters(google.protobuf.message.Message):
    """Parameters for configuring a language model"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NUM_CTX_FIELD_NUMBER: builtins.int
    REPEAT_LAST_N_FIELD_NUMBER: builtins.int
    REPEAT_PENALTY_FIELD_NUMBER: builtins.int
    TEMPERATURE_FIELD_NUMBER: builtins.int
    SEED_FIELD_NUMBER: builtins.int
    STOP_FIELD_NUMBER: builtins.int
    NUM_PREDICT_FIELD_NUMBER: builtins.int
    TOP_K_FIELD_NUMBER: builtins.int
    TOP_P_FIELD_NUMBER: builtins.int
    MIN_P_FIELD_NUMBER: builtins.int
    num_ctx: builtins.int
    """Size of the context window"""
    repeat_last_n: builtins.int
    """Number of tokens to consider for repetition penalties"""
    repeat_penalty: builtins.float
    """Penalty for repetitions"""
    temperature: builtins.float
    """Sampling temperature; higher values produce more creative outputs"""
    seed: builtins.int
    """Random seed for reproducibility"""
    num_predict: builtins.int
    """Maximum number of tokens to predict"""
    top_k: builtins.int
    """Limits next token selection to top K options"""
    top_p: builtins.float
    """Limits next token selection to tokens comprising the top P probability mass (nucleus sampling)"""
    min_p: builtins.float
    """Minimum probability threshold for token selection"""
    @property
    def stop(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """Sequences where the model should stop generating"""

    def __init__(
        self,
        *,
        num_ctx: builtins.int = ...,
        repeat_last_n: builtins.int = ...,
        repeat_penalty: builtins.float = ...,
        temperature: builtins.float = ...,
        seed: builtins.int = ...,
        stop: collections.abc.Iterable[builtins.str] | None = ...,
        num_predict: builtins.int = ...,
        top_k: builtins.int = ...,
        top_p: builtins.float = ...,
        min_p: builtins.float = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["min_p", b"min_p", "num_ctx", b"num_ctx", "num_predict", b"num_predict", "repeat_last_n", b"repeat_last_n", "repeat_penalty", b"repeat_penalty", "seed", b"seed", "stop", b"stop", "temperature", b"temperature", "top_k", b"top_k", "top_p", b"top_p"]) -> None: ...

global___ModelParameters = ModelParameters
