# Code generated by schema2code at 2025-07-18 21:27:38. DO NOT EDIT.


from typing import List, Dict, Optional, Any, Union
from datetime import datetime, date, time, timedelta
from .model_parameters import ModelParameters
from .message import Message
from .message_role import MessageRole
from .message_content import MessageContent
from .message_content_type import MessageContentType
from pydantic import BaseModel, Field, AnyUrl, EmailStr



"""ChatReq represents a request to the Ollama API"""
class ChatReq(BaseModel):
    # Model name, used internally only to set the model name in the request to ollama based on the profile
    model: str
    # Messages to send to the model, each message is a struct with role and content
    messages: List[Message]
    # If true, the response will be streamed back as a series of events
    stream: bool
    # The format to return a response in. Format can be json or a JSON schema
    format: Optional[Dict[str, Any]] = None
    # UI sends camelCase
    conversation_id: Optional[int] = None
    # Controls how long the model will stay loaded into memory
    keep_alive: Optional[int] = None
    # Additional model parameters listed in the documentation for the Modelfile such as temperature
    options: Optional[ModelParameters] = None
    # Tools to use for the request, if any
    tools: Optional[List[Dict[str, Any]]] = None
    # If true, the model will think before responding, useful for complex queries
    think: Optional[bool] = None

    class Config:
        extra = "ignore"