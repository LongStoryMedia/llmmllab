# Code generated by schema2code at 2025-07-18 21:27:39. DO NOT EDIT.


from typing import List, Dict, Optional, Any, Union
from datetime import datetime, date, time, timedelta
from .message_role import MessageRole
from .message_content import MessageContent
from .message_content_type import MessageContentType
from pydantic import BaseModel, Field, AnyUrl, EmailStr



"""Message represents a single exchange in the conversation"""
class Message(BaseModel):
    # Role of the message sender (e.g., user, assistant)
    role: MessageRole
    # Content of the message
    content: List[MessageContent]
    # Optional tool calls associated with the message
    tool_calls: Optional[List[Dict[str, Any]]] = None
    # Optional thinking process of the model, if applicable
    thinking: Optional[str] = None
    # Unique identifier for the message
    id: Optional[int] = None
    # Timestamp of when the message was created
    created_at: Optional[datetime] = None
    # Id of the conversation this message belongs to
    conversation_id: int

    class Config:
        extra = "ignore"