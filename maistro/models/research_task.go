// Code generated by schema2code at 2025-06-11 16:13:29. DO NOT EDIT.

package models

import (
	"time"
)

type ResearchPlan struct {
	MainIntent   string             `json:"main_intent"`   // Main intent or goal of the research
	SubQuestions []ResearchQuestion `json:"sub_questions"` // Sub-questions to investigate as part of the research
	RawPlan      *string            `json:"raw_plan"`      // Original plan text from LLM
}

// ResearchTaskStatus Current status of the research task
type ResearchTaskStatus string

const (
	ResearchTaskStatusPENDING ResearchTaskStatus = "PENDING"
	ResearchTaskStatusPLANNING ResearchTaskStatus = "PLANNING"
	ResearchTaskStatusGATHERING ResearchTaskStatus = "GATHERING"
	ResearchTaskStatusPROCESSING ResearchTaskStatus = "PROCESSING"
	ResearchTaskStatusSYNTHESIZING ResearchTaskStatus = "SYNTHESIZING"
	ResearchTaskStatusCOMPLETED ResearchTaskStatus = "COMPLETED"
	ResearchTaskStatusFAILED ResearchTaskStatus = "FAILED"
	ResearchTaskStatusCANCELED ResearchTaskStatus = "CANCELED"
)
// ResearchTask ResearchTask represents a deep research task
type ResearchTask struct {
	ID             int         `json:"id"`              // Unique identifier for the research task
	UserID         string      `json:"user_id"`         // Id of the user who owns the task
	Query          string      `json:"query"`           // Original research query
	Model          string      `json:"model"`           // Model used for the research
	ConversationID interface{} `json:"conversation_id"` // Id of the conversation associated with this task if any
	Status         ResearchTaskStatus `json:"status"`          // Current status of the research task
	ErrorMessage   interface{} `json:"error_message"`   // Error message if task failed
	Plan           *string     `json:"plan"`            // Research plan with sub-questions
	Results        []string    `json:"results"`         // Collected results from the research
	CreatedAt      time.Time   `json:"created_at"`      // Timestamp of when the task was created
	UpdatedAt      time.Time   `json:"updated_at"`      // Timestamp of when the task was last updated
	CompletedAt    interface{} `json:"completed_at"`    // Timestamp of when the task was completed
}
