package storage

import (
	"context"
	"log"

	"maistro/config"
	"maistro/util"
	"slices"
	"testing"

	"github.com/sirupsen/logrus"
	"github.com/testcontainers/testcontainers-go"
	"github.com/testcontainers/testcontainers-go/modules/postgres"
)

var (
	cid       = 1
	uid       = "test_user"
	title     = "Test Conversation"
	sourceIDs = []int{1, 2, 3, 4, 5}
	content   = `by bundling the inference for both LLMs and image generation into one container (or sidecar) that requests two GPUs, you ensure that model splitting can occur across both devices. This approach meets your requirement while keeping the gRPC interface separate from the inference logic, just as beforeâ€”but now with full multi-GPU utilization available in a single process.`
	level     = 1
	message1  = "What are some strategies for using multiple GPUs?"
	message2  = "You can split the model across GPUs or use a sidecar container to handle inference."
	message3  = "Can a single model leverage VRAM across multiple GPUs?"
	message4  = "Yes, by bundling inference into one container that requests two GPUs, you can utilize VRAM across both devices."
	message5  = "How can I ensure that my LLM and image generation models can run in parallel on multiple GPUs?"
	embedding = []float32{0.04154184, 0.06238567, -0.14688519, -0.022470413, 0.05658785, -0.03888742, 0.008145614, -0.009349423, -0.04132698, 0.019686896, 0.0022820898, 0.010348477, -0.0050526643, 0.019719364, 0.003925307, 0.03615719, -0.035422787, -0.021913845, -0.038975995, 0.014208843, -0.07817513, -0.041400045, 0.009003891, -0.025067233, 0.073440894, 0.009199934, 0.014916511, 0.030748818, -0.11204092, 0.04230945, 0.052464355, -0.009968731, 0.0057850354, 0.0017667675, -0.03154174, -0.03610301, 0.03279658, -0.033128574, -0.024506908, -0.0052654585, 0.01123739, -0.03048802, 0.054055367, 0.012788278, 0.040888168, -0.008583356, 0.092745, -0.079724744, 0.032566156, -0.026914928, 0.023600515, 0.05375764, -0.042389568, -0.039201904, 0.015333026, 0.0019863113, -0.05286642, 0.05788404, 0.058888618, -0.039286926, 0.022591008, 0.038574286, -0.029997976, 0.005045652, 0.059411205, 0.009327035, -0.0003313681, -0.017663974, -0.030160066, -0.031502232, 0.03263611, 0.014060236, 0.13179204, -0.019241316, 0.016046425, -0.04087473, 0.02964802, -0.008424911, -0.010370334, 0.052255724, 0.040482704, 0.008988821, 0.09863129, 0.028217765, 0.022549693, -0.0073285312, 0.008521743, -0.03430698, -0.067436814, 0.00790642, 0.0058811777, 0.049406152, 0.05503898, 0.047560483, -0.05189933, 0.011036959, -0.054843165, 0.07960063, -0.034745324, -0.005464264, -0.026406573, -0.028822822, 0.044312272, -0.075490355, 0.024861328, 0.028682616, 0.0038482787, 0.017905518, 0.057183396, 0.008536312, -0.0311695, -0.0065710726, -0.01952295, -0.032891028, 0.04551773, 0.01561957, 0.023526164, -0.029819164, -0.048590075, -0.0013178447, 0.018305853, -0.02974511, -0.015974155, 0.011549771, -0.026821876, -0.02765371, 0.026665699, 0.008148622, 0.06807998, -0.00336378, 0.049621418, -0.04400977, -0.01384729, 0.026028069, -0.030885309, 0.054218523, -0.017057002, 0.0045211622, 0.006595605, 0.006262746, 0.0017005038, -0.043020017, -0.06461407, -0.030032303, 0.027491212, -0.023425043, -0.031000974, -0.048070893, -0.043799512, -0.00091113604, -0.0036728615, 0.043679535, -0.006488288, 0.023232637, 0.03697697, -0.057036445, 0.020111978, -0.028992008, 0.013139533, -0.03556552, 0.032190613, -0.024301898, -0.03282621, 0.07597207, -0.03271945, -0.021112274, -0.028271144, 0.051519167, 0.08420943, 0.013314044, -0.046180572, 0.00233321, -0.0042348523, -0.07029865, 0.042280737, 0.044758413, 0.015301192, 0.0030589674, -0.03634407, 0.019360535, 0.015910521, 0.026474774, 0.0020075329, 0.034282576, 0.046106383, -0.01110081, 0.01929659, -0.03136111, -0.008524688, 0.022685293, 0.03184147, 0.090928644, -0.024711426, -0.039318968, -0.029539574, -0.034794185, 0.053041626, 0.04274122, 0.037616976, -0.019980766, 0.020518122, -0.011307869, -0.0711706, 0.05046771, 0.00887883, 0.0075883935, 0.0027774395, 0.0778406, 0.011827891, 0.0077600307, 0.03290608, 0.012600752, -0.03937173, -0.0055409246, -0.022757713, -0.0151998, 0.03786917, -0.06288132, -0.0027265889, 0.0041855485, 0.0032770026, 0.034835204, 0.03129585, -0.044228364, 0.06699052, -0.068574995, -0.024576692, -0.0060298294, -0.034600135, -0.024061285, -0.04379826, -0.01868761, 0.052680418, -0.0070900456, 0.011718568, 0.037978984, -0.04245402, 0.07904158, -0.07430624, 0.0019676755, 0.030749438, 0.053670608, 0.005658521, -0.0009172927, -0.040456116, 0.050987594, 0.010258197, -0.024054646, -0.02610516, 0.025880098, -0.012163452, -0.040126015, -0.023349918, 0.03087598, -0.0069799926, -0.02041088, -0.015765497, -0.020029038, -0.009091758, -0.011284061, 0.019345656, 0.0064071207, 0.037849113, 0.00830957, -0.036222056, -0.049039844, 0.06892698, -0.0406842, 0.025878841, -0.013227687, -0.032290813, 0.04648787, 0.018834943, 0.037289754, -0.020470306, -0.020506684, 0.035335697, -0.016804446, -0.024068147, 0.0450906, -0.0070115994, -0.031178508, -0.09031297, -0.022248998, 0.024995377, -0.006421385, 0.09924237, 0.009717621, -0.0025163689, 0.04233167, 0.026121879, 0.008870043, 0.018911704, -0.032899145, -0.007569432, -0.0049086707, 0.00939583, 0.034765247, 0.024695981, -0.04885607, -0.029740248, -0.039445452, 0.03147509, 0.046982754, -0.038093142, -0.028852742, 0.042256452, 0.017612096, 0.03847407, -0.033269536, -0.0075943763, -0.025526036, 0.07488601, 0.019701267, 0.012787561, -0.067366645, 0.008420151, -0.024469381, -0.00057762593, -0.023157105, -0.028530478, -0.0074876286, -0.0059344657, -0.042250782, -0.04372728, 0.05880714, -0.011924535, -0.022722444, 0.012963441, 0.038488448, -0.05274089, 0.015759172, -0.02408388, -0.010567035, -0.013960691, 0.0070895543, 0.017725008, -0.04398829, 0.019583093, 0.014459257, 0.026223125, -0.020428821, -0.017497063, -0.047576036, -0.031550996, -0.0022810653, 0.024428392, -0.013385985, 0.04972473, -0.023620887, -0.06434925, 0.007219089, 0.013564336, -0.005791623, 0.009104861, -0.07599224, 0.050314557, 0.01348239, 0.015733605, -0.006345254, 0.004671569, -0.02746967, 0.005493296, 0.022933502, 0.012901187, -0.031249367, 0.015155311, 0.026311468, 0.022838183, -0.006012435, 0.023679549, -0.06511489, -0.033728596, -0.004168607, -0.014697536, -0.01269949, -0.0654196, -0.062243827, 0.028096797, 0.038788646, 0.0073287203, 0.004883579, 0.013704369, 0.0027106027, -0.016863529, 0.026684552, 0.0066249347, -0.008850741, 0.01483929, 0.026087847, -0.00036760906, -0.087127306, -0.103562854, 0.0148368925, -0.015674492, -0.03386212, -0.015073574, -0.018626416, -0.06363337, 0.014954571, -0.051679112, -0.036300883, 0.051085226, -0.0495524, -0.011017058, 0.023647837, 0.0064187488, -0.03592531, 0.05583246, 0.03805092, 0.00858918, -0.0026539357, -0.010939129, -0.021062152, 0.040224116, 0.026730074, 0.041775186, 0.023529818, -0.015232248, -0.011544549, 0.01245626, 0.013495274, -0.033092637, -0.00091925455, -0.022569828, 0.033795398, 0.037374426, 0.01106069, -0.029216433, -0.030709412, -0.034816436, 0.020545635, 0.018353278, -0.04323624, -0.025086595, -0.03085816, 0.048606135, -0.013418383, -0.013117367, 0.032848895, 0.06831691, -0.007976268, -0.025146473, 0.001368582, 0.07642266, 0.05779241, 0.043393888, -0.078640446, -0.02010005, -0.0054584863, -0.010343061, -0.024473459, -0.045106992, 0.035578348, 0.04667071, 0.006775968, -0.0072082407, 0.026213396, 0.073757805, 0.036117498, 0.013421864, 0.038688842, -0.04276975, -0.0037100383, 0.027273066, -0.031239314, -0.044876408, -0.023493044, 0.079476304, 0.042635027, -0.00487691, 0.017606338, -0.014961779, 0.021473985, -0.0045877164, -0.04919107, -0.015157362, -0.009095846, 0.03001017, 0.00026966262, 0.018227749, 0.02850035, 0.03930945, -0.049188685, 0.025815314, 0.07915523, 0.028741132, -0.046418853, 0.028519081, 0.012149966, -0.0026259744, 0.043801144, 0.011994602, 0.008700819, 0.04054324, -0.026993787, 0.026990658, -0.02701165, -0.01021876, -0.025922013, 0.06943065, 0.058262866, 0.0060563735, -0.028202781, 0.036861934, -0.056358863, 0.01457172, -0.06647148, -0.032398336, 0.0060343663, -0.03374778, -0.03665545, 0.07769261, 0.014262949, 0.009011509, -0.056308668, 0.011511014, -0.04453496, -0.010267526, -0.05064547, -0.010462253, -0.100259386, -0.060590714, 0.030626005, -0.04819323, 0.016182141, -0.0017022223, -0.048222154, 0.025584394, 0.022727314, -0.0027576885, 0.0030651304, -0.04319253, 0.014062777, -0.0063697514, -0.07254969, -0.05304468, -0.024361338, 0.034418818, 0.0027819625, 0.023639588, 0.009673293, 0.038218156, -0.00094852777, -0.006671196, -0.006387411, -0.061252505, 0.028828364, 0.024063136, -0.022190787, 0.051336315, -0.006043933, 0.048144426, -0.060190175, 0.10218995, -0.03494922, -0.034564015, -0.07910811, 0.016817078, 0.019626, -0.008614927, -0.011091966, 0.0071315677, -0.014224153, -0.0069486676, -0.057986315, 0.023947759, 0.010461236, 0.022010026, -0.012742441, 0.025615666, -0.050847232, 0.027690884, -0.0064746523, 0.031766303, 0.010367205, -0.009364445, 0.037647814, -0.013370689, -0.019533444, -0.03111262, 0.016997878, 0.004925457, 0.046144668, -0.03791811, 0.06463878, -0.0072370498, -0.016377464, -0.0029894495, -0.019342156, 0.03620774, -0.055907752, -0.021202827, -0.010818221, -0.022362903, 0.059888836, -0.055896237, 0.009625139, 0.026397686, -0.043305308, 0.01966109, 0.03712557, 0.030542562, -0.058440074, -0.029746052, 0.04484722, 0.005118798, -0.0039677094, 0.0133835785, -0.024560336, -0.029687114, -0.023985948, -0.0090138195, -0.0059714695, 0.025810694, 0.0153605025, 0.005394976, -0.005881284, 0.009040756, -0.06928264, -0.01088617, -0.019372232, 0.018270783, -0.036519863, 0.05859779, 0.007861856, -0.052538857, -0.072460696, 0.06666854, 0.043334782, 0.030265033, 0.013483181, -0.023770422, -0.021435784, -0.008557837, 0.049219403, -0.019453557, 0.018326316, 0.011171134, 0.06418779, 0.050948635, 0.021234393, 0.0058074044, 0.0049671065, 0.047072664, 0.011856813, 0.008313375, 0.024756847, 0.047893323, 0.013576977, 0.046965264, 0.049052984, 0.033863433, 0.07240623, -0.06757068, -0.020820465, 0.037318677, -0.064543724, -0.054370075, 0.011052332, -0.065443315, -0.036036476, -0.029759122, 0.013423626, 0.011550611, -0.015861321, 0.022195207, 0.004472839, -0.07223277, -0.071200125, -0.03317063, 0.011213806, -0.06395334, 0.030511716, 0.01096006, -0.017713096, 0.039001748, 0.007168822, -0.029915104, -0.023840463, -0.011691328, 0.007069326, 0.008438272, -0.015560137, -0.0069379336, -0.014756101, 0.009100106, 0.029110983, 0.010641476, -0.03449936, -0.028685926, -0.037582148, 0.04331647, 0.027704034, -0.041628767, 0.047733873, 0.0005823632, 0.0042718425, -0.0016757154, 0.07256496, -0.013093725, 0.01110698, 0.06477923, 0.015676953, -0.03719566, -0.014350642, 0.010244142, 0.007122213, 0.061524052, -0.028362513, -0.041958362, 0.034052193, -0.017056745, 0.015500476, 0.019099426, -0.014394394, -0.032572832, -0.022023287, 0.020799486, 0.023963105, 0.037543852, -0.030984454, -0.045071196, -0.008855286, -0.006540852, -0.04252325, 0.03468068, -0.015781946, 0.038205225, -0.00097556424, 0.0029770045, 0.0316068, 0.0078123435, 0.05019991, 0.016770862, 0.007513292, -0.022779403, -0.033089306, -0.016011976, -0.0095143, -0.046951275, -0.009470366, -0.070046455, -0.00042757503, 0.011779893, -0.03701158, -0.017170735, 0.033636384, 0.072698586, -0.022719277, -0.011100203, -0.04163512, -0.013371857, -0.013133541, 0.020455733, -0.00043179092, 0.066316634, 0.034964535, 0.039303478, 0.00566086, -0.014827415, 0.005050882, 0.009682072, 0.058311973, -0.0029232327, -0.0069719944, -0.011172753, -0.014498613}
	threshold = 0.6
	limit     = 10
	ctx       = context.Background()
)

type TestFunc func(t *testing.T)

func DbTest(t *testing.T, tests ...TestFunc) {
	confFile := "testdata/.config.yaml"
	ctx := context.Background()

	pgc, err := postgres.Run(ctx,
		"timescale/timescaledb-ha:pg17",
		postgres.WithInitScripts("testdata/init_test_db.sh"),
		postgres.BasicWaitStrategies(),
	)
	if err != nil {
		panic(err)
	}
	defer func() {
		if err := testcontainers.TerminateContainer(pgc); err != nil {
			log.Printf("failed to terminate container: %s", err)
		}
	}()

	conf := config.GetConfig(&confFile)

	psqlconn, err := pgc.ConnectionString(ctx)
	if err != nil {
		panic("failed to get connection string")
	}

	InitializeStorage()

	if err := InitDB(psqlconn); err != nil {
		util.HandleError(err)
	}
	util.LogInfo("Connected to PostgreSQL database", logrus.Fields{
		"connection": psqlconn,
	})

	usrCfg := conf.GetUserConfig(uid)

	ConversationStoreInstance.CreateConversation(ctx, uid, title)
	MessageStoreInstance.AddMessage(ctx, cid, "user", message1, &usrCfg)
	MessageStoreInstance.AddMessage(ctx, cid, "assistant", message2, &usrCfg)
	MessageStoreInstance.AddMessage(ctx, cid, "user", message3, &usrCfg)
	MessageStoreInstance.AddMessage(ctx, cid, "assistant", message4, &usrCfg)
	MessageStoreInstance.AddMessage(ctx, cid, "user", message5, &usrCfg)

	for _, test := range tests {
		t.Run("DbTest", func(tt *testing.T) {
			test(tt)
		})
	}
}

func Test_Storage(t *testing.T) {
	DbTest(t,
		func(tt *testing.T) {
			results, err := SearchSimilarity(ctx, embedding, threshold, limit, nil, nil, nil, nil)
			if err != nil {
				tt.Fatalf("Expected no error, got %v", err)
			}
			for _, msg := range results {
				if len(msg.Fragments) != 2 {
					tt.Errorf("Expected 2 fragments, got %d for message ID %d", len(msg.Fragments), msg.SourceID)
				}
			}
		},
		func(tt *testing.T) {
			// Save the summary to the database
			id, err := SummaryStoreInstance.CreateSummary(ctx, cid, content, level, sourceIDs)
			if err != nil {
				tt.Fatalf("Failed to create summary: %v", err)
			}

			// Retrieve the summary from the database
			retrievedSummary, err := SummaryStoreInstance.GetSummary(ctx, id)
			if err != nil {
				tt.Fatalf("Failed to retrieve summary: %v", err)
			}

			// Check if the retrieved summary matches the original
			if retrievedSummary.Content != content {
				tt.Errorf("Expected text '%s', got '%s'", content, retrievedSummary.Content)
			}

			if retrievedSummary.SourceIds == nil || len(retrievedSummary.SourceIds) != len(sourceIDs) {
				tt.Errorf("Expected source IDs %v, got %v", sourceIDs, retrievedSummary.SourceIds)
			}
			for i, id := range retrievedSummary.SourceIds {
				if slices.Contains(sourceIDs, id) {
					continue
				}
				tt.Errorf("Expected source ID %d at index %d, but it was not found in %v", id, i, sourceIDs)
			}
		},
		func(tt *testing.T) {
			messages, err := MessageStoreInstance.GetConversationHistory(ctx, cid)
			if err != nil {
				tt.Fatalf("Failed to get messages: %v", err)
			}
			if len(messages) == 0 {
				tt.Fatal("Expected messages, got none")
			}
			for _, msg := range messages {
				if msg.ConversationID != &cid {
					tt.Errorf("Expected conversation ID %d, got %d", cid, msg.ConversationID)
				}
			}
			tt.Logf("Retrieved %d messages for conversation ID %d", len(messages), cid)
			if len(messages) < 5 {
				tt.Errorf("Expected at least 5 messages, got %d", len(messages))
			}
		},
	)
}
