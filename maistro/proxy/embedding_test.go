package proxy

import (
	"context"
	"maistro/config"
	"testing"
)

func Test_StreamOllamaEmbeddingRequest(t *testing.T) {
	confFile := "testdata/.config.yaml"
	config.GetConfig(&confFile)

	embedText := "Okay, the user is asking for the most recent version of PostgreSQL and plugins that are useful for AI. Let me start by figuring out the latest PostgreSQL version. I remember that PostgreSQL usually has major versions, like 15, 16, etc. I should check the official website or recent announcements. Wait, the user's search history mentioned Aurora PostgreSQL extensions, so maybe they're using AWS, but the question is about PostgreSQL in general. Looking up, the latest stable version as of 2023 is 15. But I should confirm. Also, there's a 16 in development. Wait, no, the latest stable is 15, and 16 is the next version. But the user might want the most recent stable. Let me check the official PostgreSQL website. Yes, the current stable is 15.0, released in 2023. So I'll mention that. Now, for AI plugins. The user mentioned \"plugins,\" but in PostgreSQL, these are usually extensions. The user is interested in AI, so I need to think about extensions that support machine learning, vector similarity, etc. The pgvector extension comes to mind, which is used for vector similarity search. That's important for AI applications like embeddings. Also, there's the TensorFlow or PyTorch integration, but those might be more complex. Another extension is the ML extensions, like pgml, which allows machine learning models within PostgreSQL. Then there's the vector extension, which is part of the core now? Or is it a separate extension? Wait, pgvector is a popular one. Also, the hstore or jsonb could be useful for AI data storage. But maybe the user is looking for more specific AI-related extensions. Also, the user might be interested in natural language processing. There's the tsvector for full-text search, which can be part of NLP. But for more advanced AI, maybe the pg trgm extension for text similarity. Also, the citus extension for distributed AI workloads, but that's more for scaling. Wait, the user might be looking for extensions that can handle AI models, like storing and querying models, or performing inference. So pgvector for vectors, pgml for machine learning, and maybe others like tensorflow or pytorch via PL/Python or PL/R. But those are more about integrating with external libraries. Also, the latest versions of PostgreSQL might have better support for these extensions. For example, PostgreSQL 15 might have improvements in JSONB or other data types that are useful for AI data. I should list the main extensions: pgvector, pgml, maybe the machine learning extensions, and mention that the user should check the PostgreSQL extension registry. Also, note that some extensions are community-driven, so their maturity and support vary. Additionally, the user might benefit from using PostgreSQL with AI frameworks like TensorFlow or PyTorch through PL/Python or other procedural languages. But that's more about integration than plugins. So, putting it all together, the answer would include the latest PostgreSQL version, then list the key extensions for AI, explaining each briefly. Also, mention that the ecosystem is growing, and recommend checking the official resources for the latest info. Most Recent Version of PostgreSQL As of October 2023 , the latest stable version of PostgreSQL is 15.0 , released on September 29, 2023 . It includes significant improvements in performance, security, and AI/ML integration. PostgreSQL 16 is in development and expected to release in 2024. PostgreSQL Plugins/Extensions for AI PostgreSQL supports a variety of extensions that are useful for AI/ML workflows. Here are the most relevant ones: 1. pgvector - Purpose : Vector similarity search for AI/ML workloads (e.g., embeddings, neural networks). - Key Features : - Efficient storage and querying of high-dimensional vectors. - Supports cosine similarity, L2 distance, and inner product. - Use Cases : Recommender systems, image/text embeddings, clustering. - GitHub : 2. pgml (PostgreSQL Machine Learning) - Purpose : Integrates machine learning models directly into PostgreSQL. - Key Features : - Trains and deploys models using Python (via PL/Python ) or R (via PL/R ). - Supports scikit-learn, TensorFlow, PyTorch, and more. - Use Cases : Predictive analytics, real-time model inference. - Documentation : 3. tensorflow or pytorch via PL/Python/PL/R - Purpose : Run AI models written in Python (TensorFlow/PyTorch) directly in PostgreSQL. - Key Features : - Execute Python/R scripts within SQL queries. - Leverage external libraries for complex AI tasks. - Use Cases : Custom AI models, real-time inference. 4. pg trgm (Text Similarity) - Purpose : Text similarity and fuzzy matching for NLP tasks. - Key Features : - Measures similarity between strings using trigrams. - Useful for spell checking, search, and data deduplication. - Use Cases : Natural language processing, search engines. 5. hstore or jsonb (Data Storage) - Purpose : Store and query unstructured or semi-structured AI data. - Key Features : - jsonb (binary JSON) for efficient storage of model outputs, logs, or embeddings. - hstore (key-value pairs) for flexible schema design. - Use Cases : Storing model metadata, logs, or feature vectors. 6. timescaledb (Time-Series AI) - Purpose : Optimized for time-series data, often used in AI/ML pipelines. - Key Features : - Automatic chunking, compression, and down-sampling. - Integration with PostgreSQL's query language. - Use Cases : Sensor data analysis, time-series forecasting. - Website : 7. citus (Distributed AI Workloads) - Purpose : Scale PostgreSQL horizontally for large AI datasets. - Key Features : - Distributes queries across multiple nodes. - Supports sharding and parallel processing. - Use Cases : Training ML models on massive datasets. - Website : Additional AI/ML Tools for PostgreSQL - plpython3 : Python 3 integration for custom AI logic. - plr : R language integration for statistical analysis. - pgBouncer : Connection pooling for AI applications with high throughput. Resources - Official PostgreSQL Extensions : - pgvector Documentation : - pgml Documentation : Let me know if you need help setting up any of these!"
	embedding, err := GetOllamaEmbedding(context.Background(), embedText, config.DefaultEmbeddingProfile.ModelName)
	if err != nil {
		t.Fatalf("Failed to get embedding: %v", err)
	}
	if len(embedding) == 0 {
		t.Fatalf("Received empty embedding for text: %s", embedText)
	}
	t.Logf("Embedding for '%s': %v", embedText, embedding)
}
